name: Build Plugin and Mod

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  create-release:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Read version.txt and save to variable
        shell: pwsh
        run: |
          $mod_version = Get-Content version.txt
          Write-Host "Version: $mod_version"
          echo "MOD_VERSION=$mod_version" | Out-File -Append -Encoding utf8 -FilePath $env:GITHUB_ENV

      - name: Check if Release exists
        id: check-release
        run: |
          # Check if the release exists
          RESPONSE=$(gh release view v${{ env.MOD_VERSION }} -R ${{ github.repository }} 2>&1 || true)
          if echo "$RESPONSE" | grep -q "Not Found"; then
            echo "Release v${{ env.MOD_VERSION }} does not exist. Skipping deletion."
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          else
            echo "Release v${{ env.MOD_VERSION }} exists."
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          fi

      - name: Delete Release if exists
        if: env.RELEASE_EXISTS == 'true'
        run: |
          # Try to delete the release and handle errors gracefully
          set +e
          gh release delete v${{ env.MOD_VERSION }} -R ${{ github.repository }} -y --cleanup-tag
          if [ $? -eq 0 ]; then
            echo "Release v${{ env.MOD_VERSION }} deleted successfully."
          else
            echo "Failed to delete release v${{ env.MOD_VERSION }}. It might not exist or there might be another issue."
          fi

      - name: Create Release with temp note
        run: gh release create v${{ env.MOD_VERSION }} --generate-notes

  generate-matrix:
    runs-on: windows-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Generate Matrix
        id: set-matrix
        shell: pwsh
        run: |
          .\matrix.ps1 -path "fabric","forge","spigot"

  build:
    runs-on: windows-latest
    needs:
      - generate-matrix
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - name: Chose JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Read version.txt and save to variable
        shell: pwsh
        run: |
          $mod_version = Get-Content version.txt
          Write-Host "Version: $mod_version"
          echo "MOD_VERSION=$mod_version" | Out-File -Append -Encoding utf8 -FilePath $env:GITHUB_ENV

      - name: Init Files
        shell: pwsh
        run: |
          ./init.ps1

      - name: Build
        env:
          USERNAME: ${{ github.actor }}
          PACKAGE_READ_ONLY_TOKEN: ${{ secrets.PACKAGE_READ_ONLY_TOKEN }}
        run: |
          cd ${{ matrix.config.mc-loader }}/${{ matrix.config.mc-loader }}-${{ matrix.config.mc-version }}
          ./gradlew clean build
          cd ../..

      - uses: actions/upload-artifact@v4
        if: ${{ github.event_name == 'push' }}
        with:
          name: QueQiao-${{ matrix.config.mc-loader }}+${{ matrix.config.mc-version }}-${{ env.MOD_VERSION }}.jar
          path: QueQiao-jar/${{ env.MOD_VERSION }}/QueQiao-${{ matrix.config.mc-loader }}+${{ matrix.config.mc-version }}-${{ env.MOD_VERSION }}.jar

      - name: Upload to Release
        if: ${{ github.event_name == 'push' }}
        run: |
          gh release upload v${{ env.MOD_VERSION }} QueQiao-jar/${{ env.MOD_VERSION }}/QueQiao-${{ matrix.config.mc-loader }}+${{ matrix.config.mc-version }}-${{ env.MOD_VERSION }}.jar
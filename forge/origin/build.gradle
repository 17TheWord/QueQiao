plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
}

def getVersionFromFile() {
    def versionFile = file('../../version.txt')
    if (versionFile.exists()) {
        return versionFile.text.trim()
    } else {
        throw new Exception("Version file not found: ${versionFile.absolutePath}") as Throwable
    }
}

def mod_version = getVersionFromFile()

def getToolVersionFromFile() {
    def versionFile = file('../../tool_version.txt')
    if (versionFile.exists()) {
        return versionFile.text.trim()
    } else {
        throw new Exception("Tool Version file not found: ${versionFile.absolutePath}") as Throwable
    }
}

def tool_version = getToolVersionFromFile()

group = mod_group_id
version = mod_version

base {
    archivesName = "${mod_name}-forge+${minecraft_version}"
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(java_version)
}

minecraft {
    mappings channel: mapping_channel, version: minecraft_version
    copyIdeResources = true
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven {
        url = uri(maven_repository_url)
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("PACKAGE_READ_ONLY_TOKEN")
        }
    }
}

// IF > forge-1.12.2
//jarJar.enable()
//tasks.named('jarJar') {
//    archiveClassifier.set('')
//    destinationDirectory = file("../../QueQiao-jar/${mod_version}")
//}
// END IF

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    annotationProcessor "org.projectlombok:lombok:${project.lombok_version}"
    implementation "org.projectlombok:lombok:${project.lombok_version}"

    minecraftLibrary("com.github.theword.queqiao:queqiao-tool:${tool_version}") {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    implementation "org.java-websocket:Java-WebSocket:${project.java_websocket_version}"
    implementation "org.yaml:snakeyaml:${project.snakeyaml_version}"
    // IF > forge-1.16.5
//    jarJar("com.github.theword.queqiao:queqiao-tool:${tool_version}") {
//        jarJar.ranged(it, "[${tool_version},)")
//        exclude group: 'org.slf4j', module: 'slf4j-api'
//    }
//
//    jarJar("org.java-websocket:Java-WebSocket:${project.java_websocket_version}") {
//        exclude group: 'org.slf4j', module: 'slf4j-api'
//        jarJar.ranged(it, "[${project.java_websocket_version},2.0.0)")
//    }
//
//    jarJar("org.yaml:snakeyaml:${project.snakeyaml_version}") {
//        jarJar.ranged(it, "[${project.snakeyaml_version},3.0)")
//    }
    // ELSE
//implementation "org.slf4j:slf4j-api:${slf4j_version}"
//implementation "org.slf4j:slf4j-simple:${slf4j_version}"
    // END IF
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version       : forge_version, forge_version_range: forge_version_range,
            loader_version_range: forge_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    // IF forge-1.16.5
//    from {
//        configurations.compileClasspath.collect {
//            if (
//                    it.name.containsIgnoreCase("queqiao-tool")
//                            || it.name.containsIgnoreCase("websocket")
//                            || it.name.containsIgnoreCase("snake")
//                            || it.name.containsIgnoreCase("slf4j")
//            )
//                zipTree(it)
//        }
//    }
//    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
//    destinationDirectory = file("../../QueQiao-jar/${mod_version}")
    // END IF
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}